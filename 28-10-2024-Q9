 /* QUESTION.14.Merge two Maps
Merge two Maps. If a key is present in both Maps, sum their values.
Input:
Map<String, Integer> map1 = new Map<String, Integer>{'A' => 1, 'B' => 2};
Map<String, Integer> map2 = new Map<String, Integer>{'B' => 3, 'C' => 4};
Output: {A => 1, B => 5, C => 4}*/
    
    Public static void  mergeTwoMaps(){  
        
        Map<String, Integer> map1 = new Map<String, Integer>{'A' => 1, 'B' => 2};
            Map<String, Integer> map2 = new Map<String, Integer>{'B' => 3, 'C' => 4};
                
                
                for (String key : map2.keySet()) {
                    
                    if (map1.containsKey(key)) {
                        map1.put(key, map1.get(key) + map2.get(key));
                    } else {
                        
                        map1.put(key, map2.get(key));
                    }
                }
        
        
        System.debug(map1);   
        
    }     
    /*Questio-15-Given two Maps, find keys present in one Map but not the other.
Input:
Map<String, Integer> map1 = new Map<String, Integer>{'A' => 1, 'B' => 2};
Map<String, Integer> map2 = new Map<String, Integer>{'B' => 2, 'C' => 3};
Output: ['A', 'C']*/
    
    
    Public static void  findKeys(){   
        Map<String, Integer> map1 = new Map<String, Integer>{'A' => 1, 'B' => 2};
            Map<String, Integer> map2 = new Map<String, Integer>{'B' => 2, 'C' => 3};
                
                
                List<String> uniqueKeys = new List<String>();
        
        
        for (String key : map1.keySet()) {
            if (!map2.containsKey(key)) {
                uniqueKeys.add(key);
            }
        }
        
        
        for (String key : map2.keySet()) {
            if (!map1.containsKey(key)) {
                uniqueKeys.add(key);
            }
        }
        
        
        System.debug(uniqueKeys);  
    }
    
    
    
    
    /* QUESTION.33. Convert a List of Maps to a single Map
Given a List of Maps, merge them into a single Map.
Input:
List<Map<String, Integer>> list = new List<Map<String, Integer>>{new Map<String, Integer>{'A' => 1}, new Map<String, Integer>{'B' => 2}}; 
Output: {A => 1, B => 2}*/
    Public static void   mergeThemSingleMap(){  
        
        
        List<Map<String, Integer>> list1 = new List<Map<String, Integer>>{ new Map<String, Integer>{'A' => 1}, new Map<String, Integer>{'B' => 2}}; 
            
         
            Map<String, Integer> mergedMap = new Map<String, Integer>();
        
        
        for (Map<String, Integer> map1: list1) {
            
            for (String key : map1.keySet()) {
                
                mergedMap.put(key, map1.get(key));
            }
        }
        
        
        System.debug(mergedMap);   
    }   
    
    
/*  QUESTION.34.Flatten a List of Lists
Write a method that flattens a List of Lists into a single List.
Input:
List<List<Integer>> list = new List<List<Integer>>{new List<Integer>{1, 2}, new List<Integer>{3, 4}};
Output: [1, 2, 3, 4]*/

    Public static void   flattenAListOfLists(){  
   
       List<List<Integer>> list1 = new List<List<Integer>>{new List<Integer>{1, 2}, new List<Integer>{3, 4}}; 
            
         
            List<Integer> mergeList = new List<Integer>();
        
        
        for (List<Integer> numOfList : list1){
            for(integer num : numOfList){
                mergeList.add(num);
                
            }
             }  
             system.debug(mergeList);
 
    
  /*  QUESTION.12.Find element with maximum frequency using a Map
Write a method that returns the element with the maximum frequency in a List using a Map.
Input:
List<Integer> list = new List<Integer>{1, 2, 2, 3, 3, 3};
Output: 3*/
    
    Public static void    maximumFrequencyUsingAMap(){  
        
        List<Integer> list2a = new List<Integer>{1, 2, 2, 3, 3, 3};
            Map<Integer, Integer> frequencyMap = new Map<Integer, Integer>();
        Integer  Frequency = 0;
        Integer Element = null;
        
        
        for (Integer num : list2a) {
            if (frequencyMap.containsKey(num)) {
                frequencyMap.put(num, frequencyMap.get(num) + 1);
            } else {
                frequencyMap.put(num, 1);
            }
        }
        
        
        for (Integer key : frequencyMap.keySet()) {
            Integer frequency1 = frequencyMap.get(key);
            if (frequency1 > Frequency) {
                Frequency = frequency1;
                Element = key;
            }
        }
        system.debug(Element);  
        
    }        
         
    
    
}
 
    /*QUESTION.38.Filter a Map based on a condition
Write a method to filter a Map's entries based on a condition applied to the values.
Input:
Map<String, Integer> map = new Map<String, Integer>{'A' => 1, 'B' => 3};
Condition: Values greater than 2.
Output: {B => 3}*/
    
    Public static void   mapValuesGreaterThan2(){  
        
        Map<String, Integer> map1 = new Map<String, Integer>{'A' => 1, 'B' => 3};
            
            Map<String, Integer> Map2 = new Map<String, Integer>();
        
        for (String key : map1.keySet()) {
            Integer value = map1.get(key);
            if (value > 2) {
                
                Map2.put(key, value);
            }
        }
        
        System.debug(Map2);   
    } 
    
    
    
 /* . QUESTION .39. Group elements of a List by their length
Write a method that groups a List of strings by the length of each string using a Map.
Input:
List<String> list = new List<String>{'apple', 'banana', 'pear', 'fig'};
Output: {5 => ['apple', 'pear'], 6 => ['banana'], 3 => ['fig']}*/  
    
      Public static void   GroupElementsTheirLength(){  
     
List<String> list1 = new List<String>{'apple', 'banana', 'pear', 'fig'};
 
    Map<Integer, String> map1 = new Map<Integer, String>(); 
    
          for(String str : list1 ){
              Integer length = str.length();
              map1.put(length,str);
              }
    system.debug(map1);
    
      }
    
    
    
    
   /* QUESTION .40. Find the first non-repeated element in a List
Write a method that finds the first non-repeated element in a List of integers using a Map.
Input:
List<Integer> list = new List<Integer>{1, 2, 2, 3, 3, 4};
Output: 1*/

      Public static void firstNonRepeatedElement(){  
    
    List<Integer> list1 = new List<Integer>{1, 2, 2, 3, 3, 4};
    
   Map<Integer, Integer> Map1 = new Map<Integer, Integer>();

 
for (Integer num : list1) {
    if (Map1.containsKey(num)) {
       
        Map1.put(num, Map1.get(num) + 1);
    } else {
       
        Map1.put(num, 1);
    }
}

 
Integer firstNonRepeated = null; 

for (Integer num : list1) {
    if (Map1.get(num) == 1) {
        firstNonRepeated = num;
        break; 
    }
}
System.debug(firstNonRepeated);  
 }
           
/*QUESTION.17.Count character occurrences in a string
Write a method to count the number of occurrences of each character in a string using a Map.
Input:
String str = 'hello';
Output: {h => 1, e => 1, l => 2, o => 1}*/
    
    
 public static  Void  countCharacterOccurrences(){
    String str = 'hello';
     
    Map<String, Integer> charCountMap = new Map<String, Integer>();

 
    for (Integer i = 0; i < str.length(); i++) {
         
        String Character = str.subString(i);

        
        if (charCountMap.containsKey(Character)) {
           
            charCountMap.put(Character, charCountMap.get(Character) + 1);
        } else {
            
            charCountMap.put(Character, 1);
        }
    }
 
System.debug(charCountMap);  
    
}   
    
     
      }   
    
