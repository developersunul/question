public class Oct26_2024 {
/*Question 1.Find median of a List of integers
Write a method to find the median of a List of integers.
Input:
List<Integer> list = new List<Integer>{3, 1, 2, 5, 4};
Output: 3*/

    public static void FindMedianOfAList() {
        List<Integer>  list1 = new List<Integer>{3, 1, 2, 5, 4};
        Integer total = 0;
        for(Integer num : list1) {
            total = total + num;
        }
        
         Integer median = total/list1.size();
        
        system.debug(median);
    } 
    /*Question 2. Move all zeroes to the end of the List
Write a method that moves all zeroes in a List to the end without changing the order of non-zero elements.
Input:
List<Integer> list = new List<Integer>{1, 0, 2, 0, 3};
Output: [1, 2, 3, 0, 0]*/

    public static void addZeroAtEnd() {
        List<Integer> input = new List<Integer>{1,0,2,0,3};
        List<Integer> newList = new List<Integer>();
        Integer x = 0;
        for(Integer num : input) {
            if(num == 0) {
                x++;
            }
            else {
                newList.add(num);
            }
        }
        for(Integer i = 0; i < x; i++) {
            newList.add(0);
        }
        system.debug(newList);
    }
    
    /*Question 3. Check if a List is palindrome
Write a method that checks if a List of integers is a palindrome.
Input:
List<Integer> list = new List<Integer>{1, 2, 3, 2, 1};
Output: true */

    public static void reverseList() {
        List<Integer> input = new List<Integer>{1,2,3,4,3,2,1};
        List<Integer> reverse = new List<Integer>();
        Boolean check = true;
        for(Integer i = input.size() - 1; i >= 0; i--) {
            reverse.add(input[i]);
        }
        for(Integer i = 0; i < input.size(); i++) {
            if(reverse[i] != input[i]) {
                check = false;
            }
        }
        if(check == true) {
            system.debug('The List is palindrome');
        }
        else {
            system.debug('The List is not palindrome');
        }
    }
    
    /*Question 9.Count all unique sublists in a List
Count all unique sublists within a List of integers.
Input:
List<Integer> list = new List<Integer>{1, 2, 2, 3};
Output: 8 */

    public static void countList() {
         List<Integer> input = new List<Integer>{1, 2, 2, 3};
         Integer x = 0;
        for(Integer i : input) {
            x = x + i;
        }
        system.debug(x);
    }
    
    //Question 10 ~ Not Completed
    public static void done() {
        List<Integer> input = new List<Integer>{4, 5, 2, 10, 8};
            for(Integer i = 0; i < input.size() - 1; i++) {
                if(input[i] == input[i + 1]) {
                    input.add(i, input[i + 1]);
                }
            }
        system.debug(input);
    }
    
    /*Question 6.Output: ['fig', 'apple', 'banana']
Find all pairs in a List with a specific difference
Write a method that finds all pairs in a List of integers where the difference between elements equals a given number.
Input:
List<Integer> list = new List<Integer>{1, 5, 3, 4, 2};
int difference = 2;
Output: [(1, 3), (3, 5), (2, 4)]*/

    public static void pairWithSameDiff(List<Integer> nums, Integer difference) {
        Set<Integer> numSet = new Set<Integer>(nums);
        List<List<Integer>> result = new List<List<Integer>>();
        for (Integer num : nums) {
            if (numSet.contains(num + difference)) {
                result.add(new List<Integer>{num, num + difference});
            }
        }
        system.debug(result);
    }
    
/*QUESTION.12.Filter Map values based on length of keys
Write a method that filters Map entries based on the length of the keys.
Input:
Map<String, Integer> map = new Map<String, Integer>{'Apple' => 5, 'Fig' => 3};
Length criteria: keys with length 3
Output: {Fig => 3}*/
    
    public static void  keysWithLength3(){
 Map<String, Integer> map1 = new Map<String, Integer>{'Apple' => 5, 'Fig' => 3};
     
Map<String, Integer> Mapstor = new Map<String, Integer>();

for(String key : map1.keySet()) {
     
    if (key.length() == 3) {
        Mapstor.put(key, map1.get(key));
    }
}
System.debug(Mapstor);
    
    }    
   
